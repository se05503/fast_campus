Room
- 데이터베이스를 쉽게 사용하기 위한 API
- Room 을 이용해서 SQLite를 조작한다. (SQLite 를 직접 조작하지 않는다.)

Android 데이터 저장 방식
- (key,value) 방식 -> sharedpreference
- 관계형 데이터베이스(행렬) -> SQLite 가 안드로이드에 내장되어 있음
    - SQLite 보다는 Room 을 이용하는 것이 권장됨 (안드로이드 공식 문서)
- sqlite에 room 이라는 추상화 계층(layer)을 덧대서 사용한다.
- Room 을 이용해서 sqlite 를 좀 더 편하게 조작하는 것
- "Room 라이브러리는 SQLite 에 추상화 계층을 제공한다.

Android 에 내장된 관계형 데이터베이스 장점?
- 앱은 서버로부터 데이터를 전달 받는다.
- 인터넷 끊고 SNS 앱 들어가도 이전에 있던 피드를 볼 수 있다.
- 한번 받은 자료(데이터)는 저장하면, 나중에 데이터를 요청할 때 서버에 요청하지 않고 앱에 내장된 데이터베이스를 보고 화면(UI)에 그리는 것임
- 오프라인때 앱이 완전히 먹통이 되는건 아니다.
- 캐시(cache) : 남아있는 자료 = 오프라인 상태에서도 앱에서 볼 수 있는 자료
- 캐싱(caching) : 캐시(cache)를 남기는 작업

- 앱 -> 서버(네트워크) -> (관계형)데이터베이스
- 앱에서 서버로 3MB 짜리 사진을 100개 요청하면, 서버 비용값으로 데이터 300MB 를 사용해야 한다.
- 서버로부터 받은 데이터(사진 100장)을 앱에 관계형 데이터베이스 형태로 저장하는 과정을 캐싱(caching)이라고 한다.
    - 해당 사진들은 다시 서버에 요청할 필요가 없어진다 -> 서버 과부하 감소
    - 데이터를 불러오는 속도가 빨라진다.
    - 오프라인 사용을 용이하게 한다. (한번 앱에 캐싱된 데이터는 오프라인 상태에서도 확인할 수 있다.)
- 처음 서버로부터 사진을 요청하는 속도보다 이미 받은 사진을 앱 내부 데이터베이스에서 불러오는 속도가 더 빠르다.

문제점
- 캐싱된 사진 100장 중 1장이라도 업데이트가 되면 다시 서버로부터 데이터를 요청해야 한다. (= 싱크를 맞춰야 한다)

참고 사항
- 관계형 데이터 베이스는 역사가 깊은 학문으로, 제대로 공부할려고 하면 그 양이 방대하다.
    - 내용도 어려운 편이고, 간단한 기술이 아니다.

