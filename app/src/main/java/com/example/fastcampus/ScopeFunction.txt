scope function 의 종류: apply, also, run(with), let

첫번째 구분) 무엇을 반환하는가?
- apply, also -> 스코프 처리가 끝나면 인스턴스(객체)를 반환한다.
- run(with), let -> 스코프 처리가 끝나면 람다의 최종값(최종라인)을 반환한다.

두번째 구분)
- apply, run(with) -> lambda scope 안에 this 가 넘어옴
    - this 는 생략할 수 있음
    - scope 밖에 있는 변수와 이름이 동일한 경우 혼동할 수 있다
- also, let -> lambda scope 안에 it 이 넘어옴
    - it 은 생략할 수 없음
    - scope 밖에 있는 변수와 이름이 같더라도 앞에 it 을 붙이기 때문에 혼동을 방지할 수 있다.

예시)
class Person(var name:String? = null, var age:Int? = null) {}

1.apply
- "적용하다"는 뜻으로, 객체를 '초기화'할 때 사용하면 좋다.
- apply 가 끝나야 객체가 만들어진다. 아직 객체가 생성이 안된 상태. this 는 Person 이라는 '클래스'를 가리킨다.
- 속성을 바꿀 때 쓰는 것이 좋다.
val person1 = Person().apply {
    name="아무개"
    age=20
}

2.also
- it 은 name 속성이 "철수"인 Person '객체'를 의미한다.
- 이미 객체가 만들어진 상태임.
- 이미 만들어진 객체에 대하여 속성을 변경하지 않고 사용한다.
- '유효성 검사'를 할 때 쓰기 좋다.

val person2 = Person("철수").also{
    nameIsGildong(it.name) // false
}

3. run
- apply 와 마찬가지로 this 사용
- lambda scope 의 마지막 줄 값을 반환한다
- 특정 계산 결과가 필요한 경우에 사용한다.
- 사용 빈도가 적다.
val future = Person("아무개", 20).run {
    age + 10
}
println(future) // 30

4. with
- run 과 동일한 기능을 하는데 형태만 다르다.
- run 과 다르게 nullable 타입을 받을 수 없다.
val ageAfter10year = with(Person("아무개",20)) {
    age + 10
}
println(ageAfter10year) // 30

5. let
- lambda scope 안에서 it(객체)을 사용한다.
- 람다의 최종 라인 값을 반환한다.
- null safety 에서 사용함
- person 이 null 이 아닌 경우에는 let 이하를 하겠다.
val person = Person("gildong")?.let {

}

사용 빈도는 apply, let 이 가장 많다.
