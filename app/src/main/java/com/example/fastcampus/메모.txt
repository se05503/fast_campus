step 1. 기능을 구현하는데 가장 먼저 우선순위를 두자!
    - OOP, Design Pattern, Coroutine, Architecture 도 안중요한건 아니지만
    그것보다는 먼저 어떤 기능을 만들어달라고 요청했을 때 해당 기능을 어떻게든 만드는 능력이 우선임
    - 입사했을때 더 중요한 사람 ->
    디자인 패턴, MVVM 아키텍처 등에 대해 잘 알지만 어떠한 기능을 부탁했을 때 제대로 못만드는 사람
     < 디자인 패턴, 아키텍처에 대해 미숙하지만 어떠한 기능을 부탁했을 때 만들 수 있는 사람

step 2. 한줄 한줄 유지보수하기 쉽게 똑바로 작성하자 -> 코틀린 언어에 대한 제대로된 이해가 필요함
    - 'Kotlin in action' 책 강력 추천
        - 코틀린을 만드신 분들이 쓴 책 (코틀린 백과사전)
        - 개발 도서 중 마지막에 in action 이 붙은 시리즈 책은 굉장히 좋은 책임
    - 그래도 우선순위는 Android > Kotlin 임. (나는 안드로이드에 대해 어느정도 잘 할 수 있다! 할 때 코틀린 공부하는 것 추천)

step 3. 전체를 잘 작성하자 -> OOP
    - 1. '도메인 주도 설계 핵심 - 핵심을 간추린 비즈니스 중심의 설계로 소프트웨어 개발 성공하기' -> 먼저 보는 것 추천
    - 2. '오브젝트 - 코드로 이해하는 객체지향 설계' -> 위에꺼 먼저 보고 보는 것 추천
    - 3-1. 'Head First Design Patterns - 케이시 시에라' -> 절판. 3-2 는 C++ 이고 내용이 많이 어려워서 먼저 보는 것 추천
    - 3-2. 'GOF의 디자인 패턴 - 재사용성을 지닌 객체지향 소프트웨어의 핵심 요소' -> 3-1번 먼저 공부하고 보는 것 추천
    - OOP 공부 순서 : 도메인 주도 개발 -> 오브젝트 -> 디자인 패턴

step 4. 프로젝트 유지보수 쉽게 하자(아키텍처)
    - developer.android.com/jetpack/guide
    - 구글 공식 문서 보는 것이 가장 좋다.
    - 구글이 권장하는 아키텍처를 선정하는 것이 좋다.
        - 변할 수 있다.
    - 샘플 앱 중 해바라기 프로젝트 보는 것 추천

step 5. 새로운 기술을 도입해서 세련된 코드를 작성하자
    - coroutine
        - rxKotlin 보다 먼저 배우는 것 추천
    - rxKotlin


